
create table "public"."prompt_run_credits" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "user_id" uuid not null,
    "value" bigint not null,
    "free" boolean not null default false
);

alter table "public"."prompt_run_credits" enable row level security;



create policy "Enable select own credits for authenticated users only"
on "public"."prompt_run_credits"
as permissive for select to authenticated
using ((auth.uid() = user_id));






CREATE UNIQUE INDEX prompt_run_credits_pkey ON public.prompt_run_credits USING btree (id);

alter table "public"."prompt_run_credits" add constraint "prompt_run_credits_pkey" PRIMARY KEY using index "prompt_run_credits_pkey";

alter table "public"."prompt_run_credits" add constraint "prompt_run_credits_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."prompt_run_credits" validate constraint "prompt_run_credits_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.insert_free_credits(uid uuid, num integer)
 RETURNS void
AS $$
BEGIN
  insert into public.prompt_run_credits (user_id, free, value) values (uid::uuid, true, num);
END;
$$ LANGUAGE plpgsql security definer;

CREATE OR REPLACE FUNCTION public.fn_trigger_free_credits() 
  RETURNS trigger
AS $$ 
BEGIN
  perform public.insert_free_credits(NEW.id, 50);
  return NEW;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE TRIGGER trigger_free_credits
  after insert on auth.users for each row
  EXECUTE FUNCTION public.fn_trigger_free_credits();

